class Solution 
{
    static int solve(int[] prices,int index,int buy,int dp[][])
    {
        if(index==prices.length)return 0;
        if(dp[index][buy]!=-1)return dp[index][buy];
        int profit=0;
        if(buy==1)
        {
          int buys= -prices[index]+solve(prices,index+1,0,dp);
          int skips= 0+solve(prices,index+1,1,dp);
            profit=Math.max(buys,skips);
        }
        else
        {
          int sell= prices[index]+solve(prices,index+1,1,dp);
          int skip= 0+solve(prices,index+1,0,dp);
          profit=Math.max(sell,skip);
        }
        return dp[index][buy]=profit;
    }
    public int maxProfit(int[] prices) 
    {
      int n=prices.length;
      int j=2;
      int dp[][]=new int[n][j];
      for(int i=0;i<n;i++)
      {
        for(int k=0;k<j;k++)
        {
          dp[i][k]=-1;
        }
      }
        int index=0;
        int buy=1;
        int ans=solve(prices,index,buy,dp);
        return ans;
    }
}
