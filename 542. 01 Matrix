public class Solution 
{
    public int[][] updateMatrix(int[][] A) 
    {
        int n = A.length;
        int m = A[0].length;
        Queue<int[]> q = new LinkedList<>();
        int[][] ans = new int[n][m];
        for (int i = 0; i < n; i++) 
        {
            for (int j = 0; j < m; j++) 
            {
                if (A[i][j] == 0) 
                {
                    ans[i][j] = 0;
                    q.offer(new int[]{i, j});
                } 
                else 
                {
                    ans[i][j] = 1_000_000; // 1e8 in C++
                }
            }
        }
        int[] dx = {0, 0, 1, -1};
        int[] dy = {-1, 1, 0, 0};
        while (!q.isEmpty()) 
        {
            int[] current = q.poll();
            int x = current[0];
            int y = current[1];
            for (int k = 0; k < 4; k++) 
            {
                int nx = x + dx[k];
                int ny = y + dy[k];
                if (nx >= 0 && nx < n && ny >= 0 && ny < m) 
                {
                    if (ans[nx][ny] > ans[x][y] + 1) 
                    {
                        ans[nx][ny] = ans[x][y] + 1;
                        q.offer(new int[]{nx, ny});
                    }
                }
            }
        }
        return ans;
    }
}
