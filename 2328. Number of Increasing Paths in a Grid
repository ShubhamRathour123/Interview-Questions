public class Solution 
{
    private static final int MOD = (int) (1e9 + 7);
    private int[][] dp;
    public int countPaths(int[][] grid) 
    {
        int count = 0;
        int n = grid.length;
        int m = grid[0].length;
        dp = new int[n][m];
        for (int i = 0; i < n; i++) 
        {
            Arrays.fill(dp[i], -1);
        }
        for (int i = 0; i < n; i++) 
        {
            for (int j = 0; j < m; j++) 
            {
                int val = dfs(i, j, n, m, grid, -1);
                count = (count + val) % MOD;
            }
        }
        return count;
    }
    private int dfs(int i, int j, int n, int m, int[][] matrix, int prev) 
    {
        if (i < 0 || j < 0 || i == n || j == m) 
        {
            return 0;
        }
        if (prev >= matrix[i][j]) 
        {
            return 0;
        }
        if (dp[i][j] != -1) 
        {
            return dp[i][j];
        }
        int choice1 = dfs(i + 1, j, n, m, matrix, matrix[i][j]);
        int choice2 = dfs(i - 1, j, n, m, matrix, matrix[i][j]);
        int choice3 = dfs(i, j + 1, n, m, matrix, matrix[i][j]);
        int choice4 = dfs(i, j - 1, n, m, matrix, matrix[i][j]);
        long ans = (choice1 + choice2 + choice3 + choice4 + 1) % MOD;
        dp[i][j] = (int) ans;
        return dp[i][j];
    }
}
